// Generated by CoffeeScript 1.6.3
(function() {
  var context;

  context = this;

  this.Api = (function() {
    Api.prototype._protocol = 'http';

    Api.prototype._port = 80;

    Api.prototype._format = 'json';

    function Api(host, path, options) {
      var _ref;
      this.host = host;
      this.path = path != null ? path : '';
      this.options = options != null ? options : {};
      if (this.host.split('://').length === 2) {
        _ref = this.host.split('://'), this.protocol = _ref[0], this.host = _ref[1];
        this.url = "" + this.protocol + "://" + this.host;
      } else {
        this.protocol = this._protocol;
        this.url = this.host;
      }
      this.port = this.options.port || this._port;
      if (this.port !== 80) {
        this.url = [this.url, this.port];
      }
      if (this.path !== '') {
        this.url = [this.url, this.path].join('/');
      }
    }

    Api.prototype.method = function(name, options) {
      return new context.Request("" + this.url + "/" + name, options);
    };

    Api.prototype.get = function(name, callback) {
      return this.method(name, {
        type: 'GET'
      }).invoke({
        success: function(data, textStatus, jqXHR) {
          return callback(data.data);
        },
        error: function(jqXHR, textStatus, errorThrown) {
          return callback([]);
        }
      });
    };

    return Api;

  })();

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  this.Request = (function() {
    function Request(url, options) {
      this.url = url;
      this.options = options;
      this.callbacks = ['success', 'error'];
    }

    Request.prototype.invoke = function(callbacks) {
      var options;
      if (callbacks == null) {
        callbacks = {};
      }
      options = {
        url: this.url,
        type: this.options.type || 'get',
        data: this.options.params || {},
        contentType: "application/json",
        dataType: 'jsonp'
      };
      options = $.extend(options, callbacks);
      $.ajax(options);
      return this;
    };

    return Request;

  })();

}).call(this);
